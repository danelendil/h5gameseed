'use strict';
var ButtonBack = require('./ButtonBack');
var ButtonMove = require('./ButtonMove');
var MoveHandler = require('./MoveHandler');
var PlayerHandler = require('./PlayerHandler');
var html = require('./ui.html');

/**
 * @uiPlayerIds {array} Array of UI players.
 */
function UI(parent, game, uiPlayerIds) {
  this.game = game;
  this.uiPlayerIds = uiPlayerIds;
  this.el = document.createElement('game-ui');
  this.el.innerHTML = html;

  this._buttonBack = new ButtonBack(
    this.el.getElementsByClassName('button-back')[ 0 ],
    this.game);

  this._buttonMove = new ButtonMove(
    this.el.getElementsByClassName('button-move')[ 0 ],
    this.game);

  this._moveHandler = new MoveHandler(
    this.el, this.game);
  
  this._playerHandler=new PlayerHandler(
    this.el, this.game);

  this._onResize = this.resize.bind(this);
  window.addEventListener('resize', this._onResize, false);

  parent.appendChild(this.el);
}

/**
 * Clean up.
 */
UI.prototype.destroy = function() {
  this._buttonBack.destroy();
  this._buttonMove.destroy();
  this._moveHandler.destroy();
  this._playerHandler.destroy();
  window.removeEventListener('resize', this._onResize);
};

/**
 * Resize game.
 */
UI.prototype.resize = function() {
  var width = this.el.clientWidth;
  var height = this.el.clientHeight;
  var buttonHeight = Math.round(height * 0.2);

  this._buttonBack.resize({
    height: buttonHeight
  });

  this._buttonMove.resize({
    height: buttonHeight
  });

  // TODO
};

/**
 * Restore UI based on current game state.
 */
UI.prototype.init = function() {
  // TODO
};

module.exports = UI;
