'use strict';
var EventEmitter = require('eventemitter3');

/**
 * Game class extends EventEmitter.
 *
 * @param {object} opts - Key-value map, containing game options
 *												like { size: 3, ... }.
 * @param {array} players - Array of player objects
 *													[ { id, name, team ... }, ... ].
 */
var Game = function(opts, players) {
	EventEmitter.call(this);
	this.opts = opts;
	this.players = players;
	this.size = parseInt(this.opts.size, 10) || 0;
	this.scoreLimit = parseInt(this.opts.scoreLimit, 10) || 0;

	this._player = undefined;
	this._ended = false;
};

Game.prototype = Object.create(EventEmitter.prototype);

Game.prototype.init = function() {
	// TODO set first player etc
};

/**
 * Get available moves.
 *
 * @param {string} pid
 * @returns {array}
 */
Game.prototype.getMoves = function(pid) {

};

/**
 * Make move.
 * TODO
 *
 * @param {string} pid - Player id.
 * @param {number} mid - Move id.
 * @returns {boolean} - If move successfull.
 */
Game.prototype.makeMove = function(pid, mid) {
	this.emit('move', pid, mid);
};

/**
 *
 */
Game.prototype.makeExtraMove = function() {

};

/**
 * Test if game over, emit 'end'.
 * TODO
 *
 * @param {string} pid - Player id.
 */
Game.prototype._end = function(pid) {
	var pidsWin = [];
	var pidsLose = [];

	this._ended = true;
	this.emit('end', pidsWin, pidsLose);
};

/**
 * Sets the next player.
 * TODO
 */
Game.prototype._setNextPlayer = function() {
	var playerLast = this._player;
	var playerNext;

	this.emit(
		'player',
		playerNext && playerNext.id,
		playerLast && playerLast.id);
};

module.exports = Game;
